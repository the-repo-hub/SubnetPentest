import datetime
import socket
import threading
import time
from threading import Thread
from typing import List

import requests
from bs4 import BeautifulSoup


class IpRange:

    def __init__(self, ip_range: str):

        self.start, self.end = ip_range.split('-')
        self.a1, self.b1, self.c1, self.d1 = map(int, self.start.split('.'))
        self.a2, self.b2, self.c2, self.d2 = map(int, self.end.split('.'))
        if self.d1 == 0:
            self.d1 = 1

    @property
    def ip_quantity(self) -> int:
        return 255 * 3 * (self.a2 - self.a1) + 255 * 2 * (self.b2 - self.b1) + 255 * (self.c2 - self.c1) + self.d2 - self.d1

    def ip_generator(self) -> str:
        for a in range(self.a1, self.a2 + 1):
            for b in range(self.b1, self.b2 + 1):
                for c in range(self.c1, self.c2 + 1):
                    for d in range(self.d1, self.d2 + 1):
                        yield '{}.{}.{}.{}'.format(a, b, c, d)


class Backend:
    ua = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'
    }
    timeout = 10
    ports = []
    # active count > 0 at start
    threads = 300 + threading.active_count()
    all_ip_quantity = 0
    hosts = []
    name: str

    @classmethod
    def host_check(cls, host: str, port: int) -> None:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(cls.timeout)
        result = sock.connect_ex((host, port))
        if result == 0:
            with open(f'{cls.name}.txt', 'a') as file:
                file.write(host + '\n')
        sock.close()
        return None

    @classmethod
    def filter_ipv4(cls, ip_ranges: List[str]) -> None:
        for num, ip_range in enumerate(ip_ranges):
            if ':' in ip_range:
                return None
            ip_range = IpRange(ip_range)
            cls.all_ip_quantity += ip_range.ip_quantity
            cls.hosts.append(ip_range)
        return None

    @classmethod
    def get_ip_ranges(cls, url: str) -> None:
        response = requests.get(url, headers=cls.ua)
        text = BeautifulSoup(response.text, 'html.parser').find('pre').text
        cls.name = BeautifulSoup(response.text, 'html.parser').find('article').find('h2').text
        cls.filter_ipv4(text.split('\n'))

    @classmethod
    def run(cls) -> None:
        cls.get_ip_ranges(input('input url: '))
        start = datetime.datetime.now()
        # FIXME make a formula, because this one will calculate with 300 threads
        estimated_seconds = cls.all_ip_quantity // 34
        print(
            f'Ip quantity: {cls.all_ip_quantity}\nWill end at: {start + datetime.timedelta(seconds=estimated_seconds)}\nEstimated seconds: {estimated_seconds}'
        )
        for ip_range in cls.hosts:
            for ip in ip_range.ip_generator():
                while threading.active_count() >= cls.threads:
                    time.sleep(0.1)
                Thread(target=cls.host_check, args=(ip,)).start()
        print(
            f'started at: {start}\nended at: {datetime.datetime.now()}\nEstimated: {datetime.datetime.now() - start}'
        )
