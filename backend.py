import re
import socket
import threading
import time
from threading import Thread

from PyQt5.QtWidgets import QLabel, QTableWidget, QTableWidgetItem


class Backend:
    host_pattern = re.compile(r'^((25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)\.){3}(25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)$')
    host_range_pattern = re.compile(r'^((25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)\.){3}(25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)-((25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)\.){3}(25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)$')
    host_cidr_pattern = re.compile(r'^((25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)\.){3}(25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)/([0-9]|[1-2][0-9]|3[0-2])$')
    lines = []
    ports = []
    timeout = 10
    threads = 300
    all_ip_quantity = 0

    @classmethod
    def host_check(cls, host: str, port: int, table: QTableWidget) -> None:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(cls.timeout)
        result = sock.connect_ex((host, port))
        if result == 0:
            current_row = table.rowCount()
            table.insertRow(current_row)
            table.setItem(current_row, 0, QTableWidgetItem(host))
            table.setItem(current_row, 1, QTableWidgetItem(str(port)))
        sock.close()
        return None

    @classmethod
    def run(cls, label: QLabel, table: QTableWidget) -> None:
        threads_orig = threading.active_count()
        for line in cls.lines:
            for host in line:
                for port in cls.ports:
                    label.setText('Current host: {host}:{port}'.format(host=host, port=port))
                    while threading.active_count() >= cls.threads + threads_orig:
                        time.sleep(0.1)
                    Thread(target=cls.host_check, args=(str(host), port, table)).start()
        while threading.active_count() != threads_orig:
            time.sleep(0.1)
        label.setText('Done!')
