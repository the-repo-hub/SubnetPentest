import sys

from PyQt5.QtWidgets import QApplication, QMainWindow, QListWidget, QTableWidget, QToolButton, QDialog, QTextEdit, QPushButton
from PyQt5.uic import loadUi
from backend import Backend
from threading import Thread


class BasePopup(QDialog):

    def __init__(self, main_menu):
        super().__init__()
        self.main_menu = main_menu
        loadUi('add.ui', self)
        self.saveBtn.clicked.connect(self.save)

    def save(self):
        pass


class HostsPopup(BasePopup):

    def __init__(self, main_menu):
        super().__init__(main_menu)
        self.textEdit.setPlainText('\n'.join(Backend.hosts))
        self.show()

    def save(self):

        Backend.hosts = self.textEdit.toPlainText().split()
        self.main_menu.hostsList.clear()
        self.main_menu.hostsList.addItems(Backend.hosts)
        self.close()


class PortsPopup(BasePopup):

    def __init__(self, main_menu):
        super().__init__(main_menu)
        self.textEdit.setPlainText('\n'.join(Backend.ports))
        self.show()

    def save(self):
        Backend.ports = self.textEdit.toPlainText().split()
        self.main_menu.portsList.clear()
        self.main_menu.portsList.addItems(Backend.ports)
        self.close()


class MainMenu(QMainWindow):
    def __init__(self):
        super().__init__()
        loadUi('main.ui', self)
        self.scan_thread = None
        self.setWindowTitle('SubnetPentest')
        self.hostsBtn.clicked.connect(self.hosts_popup)
        self.portsBtn.clicked.connect(self.ports_popup)
        self.timeout.setValue(Backend.timeout)
        self.timeout.valueChanged.connect(self.timeout_value_changed)
        self.threads.setValue(Backend.threads)
        self.threads.valueChanged.connect(self.threads_value_changed)
        self.scanBtn.clicked.connect(self.scan_start)
        self.show()

    def hosts_popup(self):
        popup = HostsPopup(self)
        popup.exec_()

    def ports_popup(self):
        popup = PortsPopup(self)
        popup.exec_()

    def threads_value_changed(self):
        Backend.threads = self.threads.value()

    def timeout_value_changed(self):
        Backend.timeout = self.timeout.value()

    def scan_start(self):
        self.scan_thread = Thread(Backend.run())
        self.scan_thread.start()


app = QApplication(sys.argv)
m = MainMenu()
sys.exit(app.exec_())
# Backend.run()
