import os
import sys
import threading
from typing import Type, List

from PyQt5.QtCore import QRect
from PyQt5.QtWidgets import (
    QMainWindow, QApplication, QDialog, QTableWidgetItem, QLabel, QToolButton, QWidget,
    QTableWidget, QListWidget, QPushButton, QCheckBox, QSpinBox, QProgressBar, QTextEdit, QHeaderView, QVBoxLayout
)
from PyQt5.uic import loadUi
from sqlalchemy import desc, and_, select

from backend import Backend
from consts import TableColumnsConsts, FrontendNames
from database import HostsDataTable, base_session


class MainMenu(QMainWindow):
    def __init__(self):
        super().__init__()
        self.hosts_popup = HostsPopup(self)
        self.ports_popup = PortsPopup(self)
        self.pptp_popup = PPTPPopup(self)
        self.init_ui()
        self.scan_thread = Type[threading.Thread]
        self.show()

    def init_ui(self):

        self.resize(800, 600)
        self.setWindowTitle('SubnetPentest')
        self.centralwidget = QWidget(self)

        self.tableWidget = QTableWidget(
            parent=self.centralwidget,
            columnCount=len(TableColumnsConsts.fields.value),
            geometry=QRect(20, 170, 760, 360),
        )
        self.tableWidget.setHorizontalHeaderLabels(TableColumnsConsts.fields.value)
        self.tableWidget.setSortingEnabled(True)
        self.tableWidget.horizontalHeader().setSectionResizeMode(
            self.tableWidget.columnCount() - 1,
            QHeaderView.Stretch,
        )

        self.portsList = QListWidget(self.centralwidget)
        self.portsList.setGeometry(QRect(20, 40, 70, 100))

        self.ports_label = QLabel(self.centralwidget, text='Ports')
        self.ports_label.setGeometry(QRect(20, 10, 66, 19))

        self.portsBtn = QToolButton(self.centralwidget, text='...')
        self.portsBtn.setGeometry(QRect(70, 10, 20, 20))
        self.portsBtn.clicked.connect(self.ports_popup.show)

        self.hosts_label = QLabel(self.centralwidget, text='Hosts')
        self.hosts_label.setGeometry(QRect(110, 10, 66, 19))

        self.hostsList = QListWidget(self.centralwidget)
        self.hostsList.setGeometry(QRect(110, 40, 191, 101))

        self.hostsBtn = QToolButton(self.centralwidget, text='...')
        self.hostsBtn.setGeometry(QRect(280, 10, 20, 20))
        self.hostsBtn.clicked.connect(self.hosts_popup.show)

        self.modulesCheckbox = QCheckBox(self.centralwidget, text='Modules')
        self.modulesCheckbox.setGeometry(QRect(330, 10, 131, 25))
        self.modulesCheckbox.stateChanged.connect(self.modules_onclick)

        self.modulesList = QListWidget(self.centralwidget, enabled=False)
        self.modulesList.setGeometry(QRect(330, 40, 191, 101))

        self.modulesBtn = QToolButton(self.centralwidget, enabled=False, text='...')
        self.modulesBtn.setGeometry(QRect(500, 10, 21, 21))

        self.scanBtn = QPushButton(self.centralwidget, enabled=False, text=FrontendNames.scan)
        self.scanBtn.setGeometry(QRect(550, 90, 111, 27))
        self.scanBtn.clicked.connect(self.scan_start)

        self.threads_spin = QSpinBox(self.centralwidget, maximum=999, minimum=1, value=300)
        self.threads_spin.setGeometry(QRect(550, 40, 61, 28))

        self.threads_label = QLabel(self.centralwidget, text='Threads:')
        self.threads_label.setGeometry(QRect(550, 20, 66, 19))

        self.timeout_label = QLabel(self.centralwidget, text='Timeout (s):')
        self.timeout_label.setGeometry(QRect(630, 20, 81, 19))

        self.timeout_spin = QSpinBox(self.centralwidget, minimum=1, value=10)
        self.timeout_spin.setGeometry(QRect(630, 40, 61, 28))

        self.currentHost_label = QLabel(self.centralwidget)
        self.currentHost_label.setGeometry(QRect(20, 540, 291, 21))

        self.quantityLabelText = QLabel(self.centralwidget, text='Count')
        self.quantityLabelText.setGeometry(QRect(180, 10, 41, 19))

        self.quantityLabel = QLabel(self.centralwidget, text='0')
        self.quantityLabel.setGeometry(QRect(235, 10, 41, 20))

        self.pptpBtn = QPushButton(self.centralwidget, text=FrontendNames.pptp_scan)
        self.pptpBtn.setGeometry(QRect(670, 90, 111, 27))
        self.pptpBtn.clicked.connect(self.pptp_popup.show)

        self.progressBar = QProgressBar(self.centralwidget, value=0)
        self.progressBar.setGeometry(QRect(360, 540, 421, 23))

        self.setCentralWidget(self.centralwidget)

    def scan_start(self):
        # clear tablewidget
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)

        # clear progressBar
        self.progressBar.setValue(0)

        self.set_modules_status(False)
        self.pptpBtn.setEnabled(False)
        self.scan_thread = threading.Thread(target=Backend.run)
        self.scan_thread.start()
        self.scanBtn.clicked.disconnect(self.scan_start)
        self.scanBtn.clicked.connect(self.scan_stop)
        self.scanBtn.setText(FrontendNames.stop)

    def scan_stop(self):
        self.scanBtn.setEnabled(False)
        self.currentHost_label.setText(f'Wait for stop {threading.active_count() - Backend.threads_orig} threads')
        Backend.scan_stop_event.set()

    def switch_btn_state(self):
        if os.getuid() == 0:
            self.pptpBtn.setEnabled(True)
        else:
            self.pptpBtn.setEnabled(False)
        if self.hostsList.count() > 0 and self.portsList.count() > 0:
            self.scanBtn.setEnabled(True)
        else:
            self.scanBtn.setEnabled(False)

    def set_modules_status(self, status: bool):
        self.modulesCheckbox.setEnabled(status)
        self.modulesList.setEnabled(status)
        self.modulesBtn.setEnabled(status)

    def modules_onclick(self, state):
        if state == 2:
            self.modulesList.setEnabled(True)
            self.modulesBtn.setEnabled(True)
        else:
            self.modulesList.setEnabled(False)
            self.modulesBtn.setEnabled(False)

    def add_line_at_table(self, host: str = str, time_s: str = str, port: str = str):
        current_row = self.tableWidget.rowCount()
        self.tableWidget.insertRow(current_row)
        self.tableWidget.setItem(current_row, TableColumnsConsts.host.value, QTableWidgetItem(host))
        self.tableWidget.setItem(current_row, TableColumnsConsts.port.value, QTableWidgetItem(str(port)))
        self.tableWidget.setItem(current_row, TableColumnsConsts.time.value, QTableWidgetItem(str(time_s)))

    def set_hosts_status(self, status: bool):
        self.hostsList.setEnabled(status)
        self.hostsBtn.setEnabled(status)

    def set_ports_status(self, status: bool):
        self.portsBtn.setEnabled(status)
        self.portsList.setEnabled(status)

    def stop_pptp_scan(self):
        self.pptpBtn.setEnabled(False)
        self.currentHost_label.setText('Wait for stop...')
        Backend.scan_stop_event.set()


class PPTPPopup(QDialog):

    def __init__(self, main_menu: MainMenu):
        super().__init__()
        self.main_menu = main_menu
        # loadUi('ui/pptp.ui', self)
        self.init_ui()

    def init_ui(self):
        self.resize(332, 236)

        self.verticalLayoutWidget = QWidget(self)
        self.verticalLayoutWidget.setGeometry(QRect(10, 20, 281, 71))

        self.verticalLayout = QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)

        self.useBase = QCheckBox(self.verticalLayoutWidget, text='Use base')

        self.verticalLayout.addWidget(self.useBase)

        self.useHosts = QCheckBox(self.verticalLayoutWidget, text='Use hosts list')

        self.verticalLayout.addWidget(self.useHosts)

        self.scanBtn = QPushButton(self, text=FrontendNames.scan)
        self.scanBtn.setGeometry(QRect(200, 200, 91, 27))
        self.scanBtn.clicked.connect(self.run_pptp_scan)

        self.cancelBtn = QPushButton(self, text='Cancel')
        self.cancelBtn.setGeometry(QRect(10, 200, 91, 27))
        self.cancelBtn.clicked.connect(self.close)

        self.toolButton = QToolButton(self)
        self.toolButton.setGeometry(QRect(300, 140, 21, 21))
        # TODO add functionality to btn

        self.verticalLayoutWidget_2 = QWidget(self)
        self.verticalLayoutWidget_2.setGeometry(QRect(10, 100, 281, 61))
        self.verticalLayout_3 = QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)

        self.label = QLabel(parent=self.verticalLayoutWidget_2, text='Credentials file path:')
        self.verticalLayout_3.addWidget(self.label)

        self.current_credentials = QLabel(self)
        self.verticalLayout_3.addWidget(self.current_credentials)

    def run_pptp_scan(self):
        hosts: List[str] = []
        if self.useBase.isChecked():
            sel = select(
                HostsDataTable.host).where(
                and_(HostsDataTable.port == 1723, HostsDataTable.username.is_(None))).order_by(
                desc(HostsDataTable.last_update)
                )
            hosts.extend(base_session.scalars(sel))
        if self.useHosts.isChecked():
            hosts.extend(map(lambda row: row, Backend.ip_networks()))
        # TODO error label
        if not hosts:
            return
        threading.Thread(target=Backend.run_pptp_scan, args=(hosts,)).start()
        self.main_menu.set_modules_status(False)
        self.main_menu.set_hosts_status(False)
        self.main_menu.set_ports_status(False)
        self.main_menu.scanBtn.setEnabled(False)
        self.main_menu.pptpBtn.setText(FrontendNames.stop)
        self.main_menu.pptpBtn.clicked.disconnect(self.main_menu.pptp_popup.show)
        self.main_menu.pptpBtn.clicked.connect(self.main_menu.stop_pptp_scan)
        self.close()


class HostsPopup(QDialog):

    def __init__(self, main_menu: MainMenu):
        super().__init__()
        self.main_menu = main_menu
        self.setModal(True)
        self.init_ui()

    def init_ui(self):
        self.resize(500, 400)

        self.hostsEdit = QTextEdit(self)
        self.hostsEdit.setGeometry(QRect(10, 150, 371, 191))

        self.clearBtn = QPushButton(self, text='Clear')
        self.clearBtn.setGeometry(QRect(390, 260, 87, 27))
        self.clearBtn.clicked.connect(self.hostsEdit.clear)

        self.saveBtn = QPushButton(self, text='Save')
        self.saveBtn.setGeometry(QRect(390, 310, 87, 27))
        self.saveBtn.clicked.connect(self.save)

        self.info_label = QLabel(
            parent=self,
            text=u"<html><head/><body><p>Examples of addreses and ip ranges:</p><p>1. 192.168.1.1</p><p>2. 192.168.1.1-192.168.1.255</p><p>3. 192.168.1.1/24</p></body></html>"
        )
        self.info_label.setGeometry(QRect(10, 20, 261, 111))

        self.warning_label = QLabel(self)
        self.warning_label.setGeometry(QRect(300, 20, 181, 111))

    def show(self):
        text = str()
        for ip in Backend.ip_networks_lines:
            text += f'{ip}\n'
        text = text[:-1]
        self.hostsEdit.setText(text)
        super().show()

    def save(self):
        lines = self.hostsEdit.toPlainText().split()
        Backend.set_ip_networks(lines)
        self.main_menu.hostsList.clear()
        self.main_menu.hostsList.addItems(self.hostsEdit.toPlainText().split())
        self.main_menu.switch_btn_state()
        self.close()


class PortsPopup(QDialog):

    def __init__(self, main_menu: MainMenu):
        super().__init__()
        self.main_menu = main_menu
        self.setModal(True)
        loadUi('ui/addPorts.ui', self)
        self.saveBtn.clicked.connect(self.save)

    def save(self):
        ports = self.portsEdit.toPlainText().split()
        for num, port in enumerate(ports, start=1):
            if not Backend.port_pattern.match(port):
                self.label.setText(f'Error in line {num}')
                return None
        Backend.ports = ports
        self.main_menu.portsList.clear()
        self.main_menu.portsList.addItems(Backend.ports)
        self.main_menu.switch_btn_state()
        self.close()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    Backend.frontend = MainMenu()
    sys.exit(app.exec_())
