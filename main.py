import ipaddress
import sys
import threading
from typing import Type

from PyQt5.QtWidgets import QApplication, QMainWindow, QDialog
from PyQt5.uic import loadUi

from backend import Backend


class MainMenu(QMainWindow):
    def __init__(self):
        super().__init__()
        loadUi('main.ui', self)
        self.scan_thread = Type[threading.Thread]
        self.hosts_popup = HostsPopup(self)
        self.ports_popup = PortsPopup(self)
        self.setWindowTitle('SubnetPentest')
        self.hostsBtn.clicked.connect(self.hosts_popup.show)
        self.portsBtn.clicked.connect(self.ports_popup.show)
        self.timeout.setValue(Backend.timeout)
        self.timeout.valueChanged.connect(self.timeout_value_changed)
        self.threads.setValue(Backend.threads)
        self.threads.valueChanged.connect(self.threads_value_changed)
        self.scanBtn.clicked.connect(self.scan_start)
        self.modulesCheckbox.stateChanged.connect(self.modules_onclick)
        self.show()

    def threads_value_changed(self):
        Backend.threads = self.threads.value()

    def timeout_value_changed(self):
        Backend.timeout = self.timeout.value()

    def scan_start(self):
        self.scan_thread = threading.Thread(target=Backend.run, args=(self,))
        self.scan_thread.start()
        self.scanBtn.clicked.disconnect(self.scan_start)
        self.scanBtn.clicked.connect(self.scan_stop)
        self.scanBtn.setText('Stop')

    def scan_stop(self):
        Backend.stop_event.set()
        self.scan_thread.join()
        self.scanBtn.clicked.disconnect(self.scan_stop)
        self.scanBtn.clicked.connect(self.scan_start)
        self.scanBtn.setText('Start')

    def switch_scan_btn_state(self):
        if self.hostsList.count() > 0 and self.portsList.count() > 0:
            self.scanBtn.setEnabled(True)
        else:
            self.scanBtn.setEnabled(False)

    def modules_onclick(self, state):
        if state == 2:
            self.vulnersList.setEnabled(True)
            self.vulnerBtn.setEnabled(True)
        else:
            self.vulnersList.setEnabled(False)
            self.vulnerBtn.setEnabled(False)


class HostsPopup(QDialog):

    quantity = 0

    def __init__(self, main_menu):
        super().__init__()
        self.main_menu = main_menu
        loadUi('addHosts.ui', self)
        self.saveBtn.clicked.connect(self.save)

    def save(self):
        lines = []
        self.quantity = 0
        # TODO move it to backend
        for num, line in enumerate(self.hostsEdit.toPlainText().split(), start=1):
            if Backend.host_pattern.match(line):
                self.quantity += 1
                lines.append((ipaddress.IPv4Address(line),))
            elif Backend.host_range_pattern.match(line):
                start, end = map(ipaddress.IPv4Address, line.split('-'))
                gen = ipaddress.summarize_address_range(start, end)
                for network in gen:
                    self.quantity += network.num_addresses
                    lines.append(network)
            elif Backend.host_cidr_pattern.match(line):
                network = ipaddress.ip_network(line, strict=False)
                self.quantity += network.num_addresses
                lines.append(network)
            else:
                print('Error at line', num)
                return None
        Backend.lines = lines
        self.main_menu.quantityLabel.setText('count: {q}'.format(q=self.quantity))
        self.main_menu.hostsList.clear()
        self.main_menu.hostsList.addItems(self.hostsEdit.toPlainText().split())
        self.main_menu.switch_scan_btn_state()
        self.close()


class PortsPopup(QDialog):

    def __init__(self, main_menu: MainMenu):
        super().__init__()
        self.main_menu = main_menu
        loadUi('addPorts.ui', self)
        self.saveBtn.clicked.connect(self.save)

    def save(self):
        Backend.ports = self.portsEdit.toPlainText().split()
        self.main_menu.portsList.clear()
        self.main_menu.portsList.addItems(Backend.ports)
        self.main_menu.switch_scan_btn_state()
        self.close()


app = QApplication(sys.argv)
m = MainMenu()
sys.exit(app.exec_())
