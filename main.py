import ipaddress
import os
import sys
import threading
from typing import Type

from PyQt5.QtWidgets import QApplication, QDialog
from PyQt5.QtWidgets import QMainWindow
from PyQt5.uic import loadUi
from backend import Backend


class MainMenu(QMainWindow):
    def __init__(self):
        super().__init__()
        loadUi('ui/main.ui', self)
        self.scan_thread = Type[threading.Thread]
        self.hosts_popup = HostsPopup(self)
        self.ports_popup = PortsPopup(self)
        self.setWindowTitle('SubnetPentest')
        self.hostsBtn.clicked.connect(self.hosts_popup.show)
        self.portsBtn.clicked.connect(self.ports_popup.show)
        self.scanBtn.clicked.connect(self.scan_start)
        self.modulesCheckbox.stateChanged.connect(self.modules_onclick)
        self.show()

    def scan_start(self):
        # clear tablewidget
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)

        self.scan_thread = threading.Thread(target=Backend.run)
        self.scan_thread.start()
        self.scanBtn.clicked.disconnect(self.scan_start)
        self.scanBtn.clicked.connect(self.scan_stop)
        self.scanBtn.setText('Stop')

    def scan_stop(self):
        self.scanBtn.setEnabled(False)
        Backend.scan_stop_event.set()
        self.scanBtn.clicked.disconnect(self.scan_stop)
        self.scanBtn.clicked.connect(self.scan_start)
        self.scanBtn.setText('Start')

    def switch_btn_state(self):
        if self.hostsList.count() > 0 and os.getuid() == 0:
            self.pptpBtn.setEnabled(True)
        else:
            self.pptpBtn.setEnabled(False)
        if self.hostsList.count() > 0 and self.portsList.count() > 0:
            self.scanBtn.setEnabled(True)
        else:
            self.scanBtn.setEnabled(False)

    def modules_onclick(self, state):
        if state == 2:
            self.vulnersList.setEnabled(True)
            self.vulnerBtn.setEnabled(True)
        else:
            self.vulnersList.setEnabled(False)
            self.vulnerBtn.setEnabled(False)


class HostsPopup(QDialog):

    def __init__(self, main_menu: MainMenu):
        super().__init__()
        self.main_menu = main_menu
        loadUi('ui/addHosts.ui', self)
        self.saveBtn.clicked.connect(self.save)

    def save(self):
        lines = []
        quantity = 0
        # TODO move it to backend
        for num, line in enumerate(self.hostsEdit.toPlainText().split(), start=1):
            if Backend.host_pattern.match(line):
                quantity += 1
                lines.append((ipaddress.IPv4Address(line),))
            elif Backend.host_range_pattern.match(line):
                start, end = map(ipaddress.IPv4Address, line.split('-'))
                gen = ipaddress.summarize_address_range(start, end)
                for network in gen:
                    quantity += network.num_addresses
                    lines.append(network)
            elif Backend.host_cidr_pattern.match(line):
                network = ipaddress.ip_network(line, strict=False)
                quantity += network.num_addresses
                lines.append(network)
            else:
                self.label.setText(f'Error in line {num}')
                return None
        Backend.ip_networks = lines
        self.main_menu.quantityLabel.setText(str(quantity))
        self.main_menu.hostsList.clear()
        self.main_menu.hostsList.addItems(self.hostsEdit.toPlainText().split())
        self.main_menu.switch_btn_state()
        self.close()


class PortsPopup(QDialog):

    def __init__(self, main_menu: MainMenu):
        super().__init__()
        self.main_menu = main_menu
        loadUi('ui/addPorts.ui', self)
        self.saveBtn.clicked.connect(self.save)

    def save(self):
        ports = self.portsEdit.toPlainText().split()
        for num, port in enumerate(ports, start=1):
            if not Backend.port_pattern.match(port):
                self.label.setText(f'Error in line {num}')
                return None
        Backend.ports = ports
        self.main_menu.portsList.clear()
        self.main_menu.portsList.addItems(Backend.ports)
        self.main_menu.switch_btn_state()
        self.close()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    Backend.frontend = MainMenu()
    sys.exit(app.exec_())
